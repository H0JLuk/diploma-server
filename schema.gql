# ------------------------------------------------------
# THIS FILE WAS AUTOMATICALLY GENERATED (DO NOT MODIFY)
# ------------------------------------------------------

type AnswerEntity {
  id: ID!
  image: String
  isRight: Boolean!
  question: [QuestionEntity!]!
  text: String
}

type CategoryEntity {
  id: ID!
  name: String!
  questions: [QuestionEntity!]
}

input CreateAnswerDto {
  image: String
  isRight: Boolean = false
  questionId: Float
  text: String
}

input CreateCategoryDto {
  name: String!
  questions: [CreateQuestionDto!] = []
}

input CreateQuestionDto {
  answers: [CreateAnswerDto!] = []
  image: String
  text: String
  text_answer: String
}

input CreateTestDto {
  duration: Float
  end_time: DateTime
  questions: [CreateQuestionDto!] = []
  start_time: DateTime
  text_answer: String
  type: String
}

input CreateUserDto {
  email: String!
  name: String
}

"""
A date-time string at UTC, such as 2019-12-03T09:54:33Z, compliant with the date-time format.
"""
scalar DateTime

type Mutation {
  createAnswer(createAnswer: CreateAnswerDto!): AnswerEntity!
  createCategory(createCategory: CreateCategoryDto!): CategoryEntity!
  createQuestion(createQuestion: CreateQuestionDto!): QuestionEntity!
  createTest(createTest: CreateTestDto!): TestEntity!
  createUser(createUser: CreateUserDto!): UserEntity!
  removeAnswer(id: Float!): Float!
  removeCategory(id: Float!): Float!
  removeQuestion(id: Float!): Float!
  removeTest(id: Float!): Float!
  removeUser(id: Float!): Float!
  updateAnswer(updateAnswer: UpdateAnswerDto!): AnswerEntity!
  updateCategory(updateCategory: UpdateCategoryDto!): CategoryEntity!
  updateQuestion(updateQuestion: UpdateQuestionDto!): QuestionEntity!
  updateTest(updateTest: UpdateTestDto!): TestEntity!
  updateUser(updateUser: UpdateUserDto!): UserEntity!
}

type Query {
  getAllCategories: [CategoryEntity!]!
  getAllQuestions: [QuestionEntity!]!
  getAllTests: [TestEntity!]!
  getAllUsers: [UserEntity!]!
  getOneAnswer(id: Float!): AnswerEntity!
  getOneCategory(id: Float!): CategoryEntity!
  getOneQuestion(id: Float!): QuestionEntity!
  getOneTest(id: Float!): TestEntity!
  getOneUser(id: Float!): UserEntity!
}

type QuestionEntity {
  answers: [AnswerEntity!]!
  categories: [CategoryEntity!]!
  id: ID!
  image: String
  tests: [TestEntity!]!
  text: String!
  text_answer: String
  type: String
}

type TestEntity {
  duration: Float
  end_time: DateTime
  id: ID!
  questions: [QuestionEntity!]
  start_time: DateTime
  type: String
}

input UpdateAnswerDto {
  id: ID!
  image: String
  isRight: Boolean!
  text: String
}

input UpdateCategoryDto {
  id: ID!
  name: String!
}

input UpdateQuestionDto {
  answers: [UpdateAnswerDto!]
  id: ID!
  image: String
  text: String
  text_answer: String
}

input UpdateTestDto {
  duration: Float
  end_time: String
  id: ID!
  start_time: DateTime
  text_answer: String
  type: String
}

input UpdateUserDto {
  email: String
  id: ID!
  name: String
}

type UserEntity {
  createdAt: DateTime!
  email: String!
  id: ID!
  name: String
  updatedAt: DateTime!
}